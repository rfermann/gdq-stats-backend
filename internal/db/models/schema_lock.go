// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db_models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SchemaLock is an object representing the database table.
type SchemaLock struct {
	LockID int64 `boil:"lock_id" json:"lock_id" toml:"lock_id" yaml:"lock_id"`

	R *schemaLockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L schemaLockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SchemaLockColumns = struct {
	LockID string
}{
	LockID: "lock_id",
}

var SchemaLockTableColumns = struct {
	LockID string
}{
	LockID: "schema_lock.lock_id",
}

// Generated where

var SchemaLockWhere = struct {
	LockID whereHelperint64
}{
	LockID: whereHelperint64{field: "\"schema_lock\".\"lock_id\""},
}

// SchemaLockRels is where relationship names are stored.
var SchemaLockRels = struct {
}{}

// schemaLockR is where relationships are stored.
type schemaLockR struct {
}

// NewStruct creates a new relationship struct
func (*schemaLockR) NewStruct() *schemaLockR {
	return &schemaLockR{}
}

// schemaLockL is where Load methods for each relationship are stored.
type schemaLockL struct{}

var (
	schemaLockAllColumns            = []string{"lock_id"}
	schemaLockColumnsWithoutDefault = []string{"lock_id"}
	schemaLockColumnsWithDefault    = []string{}
	schemaLockPrimaryKeyColumns     = []string{"lock_id"}
	schemaLockGeneratedColumns      = []string{}
)

type (
	// SchemaLockSlice is an alias for a slice of pointers to SchemaLock.
	// This should almost always be used instead of []SchemaLock.
	SchemaLockSlice []*SchemaLock
	// SchemaLockHook is the signature for custom SchemaLock hook methods
	SchemaLockHook func(context.Context, boil.ContextExecutor, *SchemaLock) error

	schemaLockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	schemaLockType                 = reflect.TypeOf(&SchemaLock{})
	schemaLockMapping              = queries.MakeStructMapping(schemaLockType)
	schemaLockPrimaryKeyMapping, _ = queries.BindMapping(schemaLockType, schemaLockMapping, schemaLockPrimaryKeyColumns)
	schemaLockInsertCacheMut       sync.RWMutex
	schemaLockInsertCache          = make(map[string]insertCache)
	schemaLockUpdateCacheMut       sync.RWMutex
	schemaLockUpdateCache          = make(map[string]updateCache)
	schemaLockUpsertCacheMut       sync.RWMutex
	schemaLockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var schemaLockAfterSelectHooks []SchemaLockHook

var schemaLockBeforeInsertHooks []SchemaLockHook
var schemaLockAfterInsertHooks []SchemaLockHook

var schemaLockBeforeUpdateHooks []SchemaLockHook
var schemaLockAfterUpdateHooks []SchemaLockHook

var schemaLockBeforeDeleteHooks []SchemaLockHook
var schemaLockAfterDeleteHooks []SchemaLockHook

var schemaLockBeforeUpsertHooks []SchemaLockHook
var schemaLockAfterUpsertHooks []SchemaLockHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SchemaLock) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SchemaLock) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SchemaLock) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SchemaLock) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SchemaLock) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SchemaLock) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SchemaLock) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SchemaLock) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SchemaLock) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schemaLockAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSchemaLockHook registers your hook function for all future operations.
func AddSchemaLockHook(hookPoint boil.HookPoint, schemaLockHook SchemaLockHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		schemaLockAfterSelectHooks = append(schemaLockAfterSelectHooks, schemaLockHook)
	case boil.BeforeInsertHook:
		schemaLockBeforeInsertHooks = append(schemaLockBeforeInsertHooks, schemaLockHook)
	case boil.AfterInsertHook:
		schemaLockAfterInsertHooks = append(schemaLockAfterInsertHooks, schemaLockHook)
	case boil.BeforeUpdateHook:
		schemaLockBeforeUpdateHooks = append(schemaLockBeforeUpdateHooks, schemaLockHook)
	case boil.AfterUpdateHook:
		schemaLockAfterUpdateHooks = append(schemaLockAfterUpdateHooks, schemaLockHook)
	case boil.BeforeDeleteHook:
		schemaLockBeforeDeleteHooks = append(schemaLockBeforeDeleteHooks, schemaLockHook)
	case boil.AfterDeleteHook:
		schemaLockAfterDeleteHooks = append(schemaLockAfterDeleteHooks, schemaLockHook)
	case boil.BeforeUpsertHook:
		schemaLockBeforeUpsertHooks = append(schemaLockBeforeUpsertHooks, schemaLockHook)
	case boil.AfterUpsertHook:
		schemaLockAfterUpsertHooks = append(schemaLockAfterUpsertHooks, schemaLockHook)
	}
}

// One returns a single schemaLock record from the query.
func (q schemaLockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SchemaLock, error) {
	o := &SchemaLock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db_models: failed to execute a one query for schema_lock")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SchemaLock records from the query.
func (q schemaLockQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchemaLockSlice, error) {
	var o []*SchemaLock

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db_models: failed to assign all query results to SchemaLock slice")
	}

	if len(schemaLockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SchemaLock records in the query.
func (q schemaLockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db_models: failed to count schema_lock rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q schemaLockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db_models: failed to check if schema_lock exists")
	}

	return count > 0, nil
}

// SchemaLocks retrieves all the records using an executor.
func SchemaLocks(mods ...qm.QueryMod) schemaLockQuery {
	mods = append(mods, qm.From("\"schema_lock\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"schema_lock\".*"})
	}

	return schemaLockQuery{q}
}

// FindSchemaLock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchemaLock(ctx context.Context, exec boil.ContextExecutor, lockID int64, selectCols ...string) (*SchemaLock, error) {
	schemaLockObj := &SchemaLock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"schema_lock\" where \"lock_id\"=$1", sel,
	)

	q := queries.Raw(query, lockID)

	err := q.Bind(ctx, exec, schemaLockObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db_models: unable to select from schema_lock")
	}

	if err = schemaLockObj.doAfterSelectHooks(ctx, exec); err != nil {
		return schemaLockObj, err
	}

	return schemaLockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SchemaLock) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db_models: no schema_lock provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schemaLockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	schemaLockInsertCacheMut.RLock()
	cache, cached := schemaLockInsertCache[key]
	schemaLockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			schemaLockAllColumns,
			schemaLockColumnsWithDefault,
			schemaLockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(schemaLockType, schemaLockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(schemaLockType, schemaLockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"schema_lock\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"schema_lock\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db_models: unable to insert into schema_lock")
	}

	if !cached {
		schemaLockInsertCacheMut.Lock()
		schemaLockInsertCache[key] = cache
		schemaLockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SchemaLock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SchemaLock) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	schemaLockUpdateCacheMut.RLock()
	cache, cached := schemaLockUpdateCache[key]
	schemaLockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			schemaLockAllColumns,
			schemaLockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db_models: unable to update schema_lock, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"schema_lock\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, schemaLockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(schemaLockType, schemaLockMapping, append(wl, schemaLockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to update schema_lock row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models: failed to get rows affected by update for schema_lock")
	}

	if !cached {
		schemaLockUpdateCacheMut.Lock()
		schemaLockUpdateCache[key] = cache
		schemaLockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q schemaLockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to update all for schema_lock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to retrieve rows affected for schema_lock")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SchemaLockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db_models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schemaLockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"schema_lock\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, schemaLockPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to update all in schemaLock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to retrieve rows affected all in update all schemaLock")
	}
	return rowsAff, nil
}

// Delete deletes a single SchemaLock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SchemaLock) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db_models: no SchemaLock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schemaLockPrimaryKeyMapping)
	sql := "DELETE FROM \"schema_lock\" WHERE \"lock_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to delete from schema_lock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models: failed to get rows affected by delete for schema_lock")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q schemaLockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db_models: no schemaLockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to delete all from schema_lock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models: failed to get rows affected by deleteall for schema_lock")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SchemaLockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(schemaLockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schemaLockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"schema_lock\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schemaLockPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models: unable to delete all from schemaLock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models: failed to get rows affected by deleteall for schema_lock")
	}

	if len(schemaLockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SchemaLock) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSchemaLock(ctx, exec, o.LockID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SchemaLockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SchemaLockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schemaLockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"schema_lock\".* FROM \"schema_lock\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schemaLockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db_models: unable to reload all in SchemaLockSlice")
	}

	*o = slice

	return nil
}

// SchemaLockExists checks if the SchemaLock row exists.
func SchemaLockExists(ctx context.Context, exec boil.ContextExecutor, lockID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"schema_lock\" where \"lock_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, lockID)
	}
	row := exec.QueryRowContext(ctx, sql, lockID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db_models: unable to check if schema_lock exists")
	}

	return exists, nil
}

// Exists checks if the SchemaLock row exists.
func (o *SchemaLock) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SchemaLockExists(ctx, exec, o.LockID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SchemaLock) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db_models: no schema_lock provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schemaLockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	schemaLockUpsertCacheMut.RLock()
	cache, cached := schemaLockUpsertCache[key]
	schemaLockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			schemaLockAllColumns,
			schemaLockColumnsWithDefault,
			schemaLockColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			schemaLockAllColumns,
			schemaLockPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db_models: unable to upsert schema_lock, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(schemaLockPrimaryKeyColumns))
			copy(conflict, schemaLockPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"schema_lock\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(schemaLockType, schemaLockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(schemaLockType, schemaLockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db_models: unable to upsert schema_lock")
	}

	if !cached {
		schemaLockUpsertCacheMut.Lock()
		schemaLockUpsertCache[key] = cache
		schemaLockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
